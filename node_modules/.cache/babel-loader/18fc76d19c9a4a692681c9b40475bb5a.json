{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    var publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('install', function () {\n      console.log(\"install!!\");\n    });\n    var CACHE_NAME = 'TaskPlannerCache-v1';\n    window.addEventListener('fetch', function (event) {\n      event.respondWith(caches.match(event.request).then(function (response) {\n        // Cache hit - return response\n        if (response) {\n          return response;\n        } // IMPORTANT: Clone the request. A request is a stream and\n        // can only be consumed once. Since we are consuming this\n        // once by cache and once by the browser for fetch, we need\n        // to clone the response.\n\n\n        var fetchRequest = event.request.clone();\n        return fetch(fetchRequest).then(function (response) {\n          // Check if we received a valid response\n          if (!response || response.status !== 200 || response.type !== 'basic') {\n            return response;\n          } // IMPORTANT: Clone the response. A response is a stream\n          // and because we want the browser to consume the response\n          // as well as the cache consuming the response, we need\n          // to clone it so we have two streams.\n\n\n          var responseToCache = response.clone();\n          caches.open(CACHE_NAME).then(function (cache) {\n            cache.put(event.request, responseToCache);\n          });\n          return response;\n        });\n      }));\n    });\n    window.addEventListener('load', function () {\n      var swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(function () {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit http://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    var contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["/home/e-learning_estevan/Documentos/Personal/Task-Planner-React-PWA-FrontEnd/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","console","log","CACHE_NAME","event","respondWith","caches","request","then","response","fetchRequest","clone","fetch","status","type","responseToCache","open","cache","put","swUrl","checkValidServiceWorker","serviceWorker","ready","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","contentType","headers","get","indexOf","unregister","reload"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n        window.addEventListener('install', () => {\n            console.log(\"install!!\");\n        });\n        let CACHE_NAME = 'TaskPlannerCache-v1';\n\n\n        window.addEventListener('fetch', (event) => {\n            event.respondWith(\n                caches.match(event.request)\n                    .then(function (response) {\n                        // Cache hit - return response\n                        if (response) {\n                            return response;\n                        }\n\n                        // IMPORTANT: Clone the request. A request is a stream and\n                        // can only be consumed once. Since we are consuming this\n                        // once by cache and once by the browser for fetch, we need\n                        // to clone the response.\n                        const fetchRequest = event.request.clone();\n\n                        return fetch(fetchRequest).then(\n                            function (response) {\n                                // Check if we received a valid response\n                                if (!response || response.status !== 200 || response.type !== 'basic') {\n                                    return response;\n                                }\n\n                                // IMPORTANT: Clone the response. A response is a stream\n                                // and because we want the browser to consume the response\n                                // as well as the cache consuming the response, we need\n                                // to clone it so we have two streams.\n                                const responseToCache = response.clone();\n\n                                caches.open(CACHE_NAME)\n                                    .then(function (cache) {\n                                        cache.put(event.request, responseToCache);\n                                    });\n\n                                return response;\n                            }\n                        );\n                    })\n            );\n        });\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}